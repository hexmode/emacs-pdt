;;; pdt.el --- PHP Development Tools for GNU Emacs
;;
;; Copyright (C) 2012 neutrico.pl
;;
;; Name: Emacs PDT
;; Author: Marcin Antczak <marcin.antczak@neutrico.pl>
;; Version: 0.0.1
;; Keywords: php
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 2 of
;; the License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be
;; useful, but WITHOUT ANY WARRANTY; without even the implied
;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
;; PURPOSE.  See the GNU General Public License for more details.
;;
;;; Commentary:
;;
;; This package provides tools for PHP development.
;;
;;; Code:

(defconst pdt-mode-version-number "0.0.1"
  "PDT version number.")

(require 'cl)
(require 'easymenu)
(require 'help-mode)
(require 'pdt-doc)
(require 'pdt-help)
(require 'pdt-project)

;;---------------------------------------------------------------------------
;; Global stuff


;;---------------------------------------------------------------------------
;; Customization

(defgroup pdt nil
  "PHP Development Tools"
  :group 'editing
  :prefix "pdt-")

(defcustom pdt-minor-mode-hook nil
  "Hook called when PDT minor mode is activated or deactivated."
  :type 'hook
  :group 'pdt
  :version "0.0.1")

;;;; Internal variables
(defvar pdt-minor-mode nil
  "Non-nil if using PDT mode as a minor mode of some other mode.
Use the command `pdt-minor-mode' to toggle or set this variable.")

;; (defvar pdt-minor-mode-menu nil
;;   "Holds the PDT menu.")

(defun pdt-init-minor-mode-keymap ()
  "Set up the `pdt-mode' keymap."
  (let ((map (make-sparse-keymap)))
    (define-key map "\C-c@\C-h"	'pdt-test)
    map))

(defvar pdt-minor-mode-map (pdt-init-minor-mode-keymap)
  "The keymap used when `pdt-mode' is active.")

(easy-menu-define pdt-minor-mode-menu pdt-minor-mode-map
  "Menu used when `pdt-mode' is active."
  '("PDT"
    ["Test" pdt-test
     :help "PDT test"]
	;; ["Search documentation" pdt-search-documentation
	;;  :help "Online PHP documentation"]
))

;;---------------------------------------------------------------------------
;; PDT commands
(defun pdt-test ()
  (message "test"))

;;---------------------------------------------------------------------------
;; PDT mode

(define-minor-mode pdt-minor-mode
  "PHP Development Tools minor mode"
  nil
  :group 'pdt
  :lighter " PDT"
  :keymap pdt-minor-mode-map
  (if pdt-minor-mode
      (progn
	(easy-menu-add pdt-minor-mode-menu))))

;; ;;; php-extras.el --- Extra features for `php-mode'

;; ;; Copyright (C) 2012 Arne Jørgensen

;; ;; Author: Arne Jørgensen <arne@arnested.dk>
;; ;; URL: https://github.com/arnested/php-extras
;; ;; Created: June 28, 2012
;; ;; Version: 0.2.1
;; ;; Package-Requires: ((php-mode "1.5.0"))
;; ;; Keywords: programming, php

;; ;; This software is free software: you can redistribute it and/or
;; ;; modify it under the terms of the GNU General Public License as
;; ;; published by the Free Software Foundation, either version 3 of the
;; ;; License, or (at your option) any later version.

;; ;; This software is distributed in the hope that it will be useful,
;; ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
;; ;; General Public License for more details.

;; ;; You should have received a copy of the GNU General Public License
;; ;; along with this software. If not, see
;; ;; <http://www.gnu.org/licenses/>.

;; ;;; Commentary:

;; ;; Extra features for `php-mode':

;; ;; * `php-extras-insert-previous-variable'
;; ;; * `php-extras-eldoc-documentation-function'

;; ;; Whoop whoop!

;; ;;; Code:

;; (defvar php-extras-php-variable-regexp
;;   (format "\\(\\$[a-zA-Z_%s-%s][a-zA-Z0-9_%s-%s]*\\(\\[.*\\]\\)*\\)"
;;           (char-to-string 127) (char-to-string 255)
;;           (char-to-string 127) (char-to-string 255))
;;   "Regexp for a PHP variable.")

;; (defvar php-extras-eldoc-functions-file (concat (file-name-directory (or load-file-name buffer-file-name)) "php-extras-eldoc-functions")
;;   "File holding `php-extras-function-arguments' hash table.")

;; (defvar php-extras-function-arguments nil
;;   "Hash table of PHP functions and their function arguments.
;; Generated by `php-extras-gen-eldoc-elem-string'.")

;; ;;;###autoload
;; (defcustom php-extras-insert-previous-variable-key [(control c) (control $)]
;;   "Key sequence for `php-extras-insert-previous-variable'."
;;   :group 'php
;;   :set #'(lambda (symbol value)
;;            ;; When `php-mode-map' is already loaded define it in the map.
;;            (when (boundp 'php-mode-map)
;;              ;; First undefine the old key sequence if defined.
;;              (when (eq (lookup-key php-mode-map php-extras-insert-previous-variable-key) 'php-extras-insert-previous-variable)
;;                (define-key php-mode-map php-extras-insert-previous-variable-key 'undefined))
;;              ;; Then define the new key sequence.
;;              (define-key php-mode-map value 'php-extras-insert-previous-variable))
;;            ;; Finally and always set the variable `php-extras-insert-previous-variable-key'.
;;            (set-default symbol value))
;;   :type 'key-sequence)



;; ;;;###autoload
;; (defun php-extras-insert-previous-variable (arg)
;;   "Insert previously used variable from buffer.
;; With prefix argument search that number of times backwards for
;; variable. If prefix argument is negative search forward."
;;   (interactive "P")
;;   (when (null arg)
;;     (setq arg 1))
;;   (save-excursion
;;     (dotimes (var (abs arg))
;;       (if (> arg 0)
;;           (re-search-backward php-extras-php-variable-regexp nil t)
;;         (re-search-forward php-extras-php-variable-regexp nil t))))
;;   (if (match-string-no-properties 1)
;;       (insert (match-string-no-properties 1))
;;     (message "No variable to insert.")))

;; ;;;###autoload
;; (defun php-extras-eldoc-documentation-function ()
;;   "Get function arguments for core PHP function at point."
;;   (when (require 'php-extras-eldoc-functions php-extras-eldoc-functions-file t)
;;     (gethash (php-get-pattern) php-extras-function-arguments)))

;; ;;;###autoload
;; (add-hook 'php-mode-hook #'(lambda ()
;;                              (unless eldoc-documentation-function
;;                                (set (make-local-variable 'eldoc-documentation-function)
;;                                     #'php-extras-eldoc-documentation-function))))



;; ;;;###autoload
;; (eval-after-load 'php-mode
;;   `(let ((map php-mode-map)
;;          (key php-extras-insert-previous-variable-key))
;;      (define-key map key 'php-extras-insert-previous-variable)))



;; (provide 'php-extras)

;; ;;; php-extras.el ends here

;; use code from multi-web-mode to enable PHP specific functions and settings when
;; <?php open tag is available.
;; https://github.com/fgallina/multi-web-mode/blob/master/multi-web-mode.el


(provide 'pdt)

;;; pdt.el ends here
;; Local Variables:
;; coding: utf-8
;; byte-compile-warnings: (not cl-functions)
;; End:
